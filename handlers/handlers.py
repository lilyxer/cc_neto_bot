from random import choice, shuffle

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.state import default_state
from keyboards.keyboards import BotKeyBoardStart, BotKeyBoard, BotKeyBoardProgres, BotKeyBoardCancel
from sqlalchemy import select, delete, and_, func, union_all
from sqlalchemy.ext.asyncio import AsyncSession
from states.states import FSMInProgress

from lexicon.lexicon import answers
from core.scripts import parse_words
from database.models import User, Word, UserAddWord


router = Router()

@router.message(CommandStart(), StateFilter(default_state))
async def process_start_command(msg: Message, state: FSMContext,
                                session: AsyncSession):
    """–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –≤—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –∏ –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è"""
    await msg.answer(text=answers['/start'], reply_markup=BotKeyBoardStart()())
    await state.set_state(FSMInProgress.progress)
    query = select(User).where(User.user_id == msg.from_user.id)
    answer = await session.execute(query)
    if not answer.scalars().first():
        new_user = User(user_id=msg.from_user.id, name=msg.from_user.full_name)
        session.add(new_user)
        await session.commit()
        await msg.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {msg.from_user.full_name}')
    else:
        await msg.answer(f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {msg.from_user.full_name}')


@router.message(F.text.in_({'–£—á–∏—Ç—å', '–î–∞–ª—å—à–µ ‚è≠'}), StateFilter(FSMInProgress.progress))
async def process_in_learn(msg: Message, session: AsyncSession):
    await msg.answer(text=answers['–£—á–∏—Ç—å'])
    stmt1 = select(Word.word_eng, Word.word_rus).order_by(func.random())
    stmt2 = (select(UserAddWord.word_eng, UserAddWord.word_rus)
             .filter(UserAddWord.user_id == msg.from_user.id).order_by(func.random()))
    u = union_all(stmt1, stmt2)
    u = u.limit(4)
    words = await session.execute(u)
    words = words.fetchall()
    shuffle(words)
    kb = BotKeyBoard(choice(words)[1], [x[1] for x in words])()
    await msg.answer(text=f'–ü—Ä–æ–±—É–µ–º, –Ω–∞–∂–º–∏ –Ω–∞ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å–ª–æ–≤–∞:\n{words[0][0]}',
                     reply_markup=kb)


@router.message(F.text.in_({'–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô', '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'}),
                StateFilter(FSMInProgress.progress))
async def process_enter_to_add_word(msg: Message, state: FSMContext):
    if msg.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï':
        await msg.answer(text=answers['–î–æ–±–∞–≤–ª–µ–Ω–∏–µ'], reply_markup=BotKeyBoardCancel()())
        await state.set_state(FSMInProgress.add_word)
    else:
        await msg.answer(text=answers['–£–¥–∞–ª–µ–Ω–∏–µ'], reply_markup=BotKeyBoardCancel()())
        await state.set_state(FSMInProgress.del_word)


@router.callback_query(F.data == 'cancel', StateFilter(FSMInProgress.add_word))
async def process_cancel(clbk: CallbackQuery, state: FSMContext):
    await clbk.message.delete_reply_markup()
    await state.set_state(FSMInProgress.progress)
    await clbk.message.answer(text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—ã–Ω–∏—è',
                              reply_markup=BotKeyBoardProgres()())


@router.message(StateFilter(FSMInProgress.add_word))
async def process_add_word(msg: Message, state: FSMContext, session: AsyncSession):
    msg.delete_reply_markup()
    await state.set_state(FSMInProgress.progress)
    if ',' in msg.text:
        text = msg.text.split(',')
        try:
            for row in text:
                eng, rus = parse_words(row)
                new_data = UserAddWord(word_eng=eng, word_rus=rus, user_id=msg.from_user.id)
                session.add(new_data)
            await session.commit()
            await msg.answer(text='–û–ö, –µ–¥–µ–º –¥–∞–ª—å—à–µ?', reply_markup=BotKeyBoardProgres()())
        except Exception as e:
            await session.rollback()
            await msg.answer(
                text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}',
                reply_markup=BotKeyBoardProgres()(),
            )
    else:
        try:
            eng, rus = parse_words(msg.text)
            new_data = UserAddWord(word_eng=eng, word_rus=rus, user_id=msg.from_user.id)
            session.add(new_data)
            await session.commit()
            await msg.answer(text='–û–ö, –µ–¥–µ–º –¥–∞–ª—å—à–µ?', reply_markup=BotKeyBoardProgres()())
        except Exception as e:
            await session.rollback()
            await msg.answer(
                text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}',
                reply_markup=BotKeyBoardProgres()(),
            )


@router.message(StateFilter(FSMInProgress.del_word))
async def process_add_word(msg: Message, state: FSMContext, session: AsyncSession):
    await state.set_state(FSMInProgress.progress)
    async with session as db_session:
        delete_stmt = delete(UserAddWord).where(
            and_(UserAddWord.user_id == msg.from_user.id,
                 UserAddWord.word_eng == msg.text.strip().capitalize())
        )
        result = await db_session.execute(delete_stmt)
        deleted_rows = result.rowcount
        if deleted_rows:
            await db_session.commit()
            await msg.answer(f'{msg.text} —É–¥–∞–ª–µ–Ω–æ', reply_markup=BotKeyBoardProgres()())
        else:
            await db_session.rollback()
            await msg.answer(f'{msg.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=BotKeyBoardProgres()())


@router.callback_query()
async def check_query(clbk: CallbackQuery):
    await clbk.message.delete_reply_markup()
    text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏' if clbk.data.strip() else '–ò–∑–≤–∏–Ω–∏, —Ç—ã –Ω–µ –ø—Ä–∞–≤'
    await clbk.message.answer(text=text,
                              reply_markup=BotKeyBoardProgres()())


@router.message(F.text.in_({'–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï', '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'}),
                ~StateFilter(FSMInProgress.progress))
async def process_not_entry(msg: Message):
    """–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ start - –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è"""
    await msg.answer(text='–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏ /start - –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è '
                          '–∏ –ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π',
                          reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='/start')]],
                                                           resize_keyboard=True))


@router.message()
async def send_answer(msg: Message):
    await msg.answer(text='–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏'
                     '\n/start - –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è –∏ –ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π')
